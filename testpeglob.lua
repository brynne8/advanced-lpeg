local glob = require('peglob')

-- Metrics for evaluation
local TP = 0  -- True Positives
local FP = 0  -- False Positives
local TN = 0  -- True Negatives
local FN = 0  -- False Negatives

local function assert_match(expected, pattern, str)
  local success, grammar = pcall(function() return glob:match(pattern) end)

  if not success or not grammar then
    if expected then FP = FP + 1
    else FN = FN + 1 end
    return -- print(string.format("  Invalid grammar for pattern '%s' matching '%s'", pattern, str))
  end

  local result = grammar:match(str)
  if not result == expected then
    if expected then FP = FP + 1
    else FN = FN + 1 end
    return -- print(string.format("  Assertion failed for pattern '%s' matching '%s': expected %s, got %s", 
      -- pattern, str, tostring(expected), tostring(result)))
  else
    if expected then TP = TP + 1
    else TN = TN + 1 end
  end
end

local function report_results()
  local accuracy = (TP + TN) / (TP + TN + FP + FN)
  local precision = TP / (TP + FP)

  print(string.format("Test Summary: %d/%d tests passed", TP + TN, TP + TN + FP + FN))
  print(string.format("Accuracy: %.2f%%", accuracy * 100))
  print(string.format("Precision: %.2f%%\n", precision * 100))

  TP = 0
  FP = 0
  TN = 0
  FN = 0
end

-- Basic pattern matching tests (fundamental pattern matching behavior)
local function test_basic_patterns()
  assert_match(true, 'a', 'a')
  assert_match(true, 'ab', 'ab')
  assert_match(true, '.', '.')
  assert_match(true, 'abc', 'abc')
  assert_match(true, '*', 'abc')
  assert_match(true, '*', '')
  assert_match(true, '**', '')
  assert_match(true, '*c', 'abc')
  assert_match(false, '*b', 'abc')
  assert_match(true, 'a*', 'abc')
  assert_match(false, 'b*', 'abc')
  assert_match(true, 'a*', 'a')
  assert_match(true, '*a', 'a')
  assert_match(false, 'a/', 'a/.b')
  assert_match(true, '?/?', 'a/b')
  assert_match(true, '/??', '/ab')
  assert_match(true, '/?b', '/ab')
  assert_match(false, 'bz', 'a/b/z/.a')
  assert_match(false, 'foo?bar', 'foo/bar')

  assert_match(true, 'a/*/test', 'a/foo/test')
  assert_match(false, 'a/*/test', 'a/foo/bar/test')
  assert_match(true, 'a/**/test', 'a/foo/test')
  assert_match(true, 'a/**/test', 'a/foo/bar/test')
  assert_match(true, 'a/**/b/c', 'a/foo/bar/b/c')
  assert_match(true, 'a\\*b', 'a*b')
  assert_match(false, 'a\\*b', 'axb')

  assert_match(true, '[abc]', 'a')
  assert_match(true, '[abc]', 'b')
  assert_match(true, '[abc]', 'c')
  assert_match(false, '[abc]', 'd')
  assert_match(true, 'x[abc]x', 'xax')
  assert_match(true, 'x[abc]x', 'xbx')
  assert_match(true, 'x[abc]x', 'xcx')
  assert_match(false, 'x[abc]x', 'xdx')
  assert_match(false, 'x[abc]x', 'xay')
  assert_match(true, '[?]', '?')
  assert_match(false, '[?]', 'a')
  assert_match(true, '[*]', '*')
  assert_match(false, '[*]', 'a')

  assert_match(true, '[a-cx]', 'a')
  assert_match(true, '[a-cx]', 'b')
  assert_match(true, '[a-cx]', 'c')
  assert_match(false, '[a-cx]', 'd')
  assert_match(true, '[a-cx]', 'x')

  assert_match(false, '[!abc]', 'a')
  assert_match(false, '[!abc]', 'b')
  assert_match(false, '[!abc]', 'c')
  assert_match(true, '[!abc]', 'd')
  assert_match(true, '[\\!]', '!')

  assert_match(false, '*.txt', 'some/big/path/to/the/needle.txt')
  assert_match(true, 'some/**/needle.{js,tsx,mdx,ts,jsx,txt}', 'some/a/bigger/path/to/the/crazy/needle.txt')
  assert_match(true, 'some/**/{a,b,c}/**/needle.txt', 'some/foo/a/bigger/path/to/the/crazy/needle.txt')
  assert_match(false, 'some/**/{a,b,c}/**/needle.txt', 'some/foo/d/bigger/path/to/the/crazy/needle.txt')

  print("Basic pattern tests complete")
  report_results()
end

-- Single wildcard tests (single * matching)
local function test_stars()
  -- Single wildcard
  assert_match(true, '*', 'foo')
  assert_match(true, '*', 'lmao.ts')
  assert_match(true, '*', '')
  assert_match(true, '*', '   ')
  assert_match(true, '*', '*')
  assert_match(true, '*', 'aaa')
  assert_match(true, '*', 'ab')

  -- Wildcard with extension
  assert_match(true, '*.ts', 'foo.ts')
  assert_match(true, '*.ts', '.ts')
  assert_match(false, '*.ts', '')
  assert_match(false, '*.ts', 'bar.tsx')
  assert_match(false, '*.ts', 'foo/bar.ts')
  assert_match(false, '*.ts', 'foo/bar/baz.ts')

  assert_match(true, 'a*b*c*d*e*', 'axbxcxdxe')
  assert_match(true, 'a*b*c*d*e*', 'axbxcxdxexxx')
  assert_match(true, 'a*b?c*x', 'abxbbxdbxebxczzx')
  assert_match(false, 'a*b?c*x', 'abxbbxdbxebxczzy')

  assert_match(true, 'a*b*[cy]*d*e*', 'axbxcxdxexxx')
  assert_match(true, 'a*b*[cy]*d*e*', 'axbxyxdxexxx')
  assert_match(true, 'a*b*[cy]*d*e*', 'axbxxxyxdxexxx')

  -- ported
  assert_match(false, '*.js', 'a/b/c/z.js')
  assert_match(false, '*.js', 'a/b/z.js')
  assert_match(false, '*.js', 'a/z.js')
  assert_match(true, '*.js', 'z.js')
  assert_match(true, 'z*.js', 'z.js')
  assert_match(true, '*/*', 'a/z')
  assert_match(true, '*/z*.js', 'a/z.js')
  assert_match(true, 'a/z*.js', 'a/z.js')
  assert_match(true, '*', 'ab')
  assert_match(true, '*', 'abc')
  assert_match(false, 'f*', 'bar')
  assert_match(false, '*r', 'foo')
  assert_match(false, 'b*', 'foo')
  assert_match(false, '*', 'foo/bar')
  assert_match(true, '*c', 'abc')
  assert_match(true, 'a*', 'abc')
  assert_match(true, 'a*c', 'abc')
  assert_match(true, '*r', 'bar')
  assert_match(true, 'b*', 'bar')
  assert_match(true, 'f*', 'foo')
  assert_match(true, '*abc*', 'one abc two')
  assert_match(true, 'a*b', 'a         b')
  assert_match(false, '*a*', 'foo')
  assert_match(true, '*a*', 'bar')
  assert_match(true, '*abc*', 'oneabctwo')
  assert_match(false, '*-bc-*', 'a-b.c-d')
  assert_match(true, '*-*.*-*', 'a-b.c-d')
  assert_match(true, '*-b*c-*', 'a-b.c-d')
  assert_match(true, '*-b.c-*', 'a-b.c-d')
  assert_match(true, '*.*', 'a-b.c-d')
  assert_match(true, '*.*-*', 'a-b.c-d')
  assert_match(true, '*.*-d', 'a-b.c-d')
  assert_match(true, '*.c-*', 'a-b.c-d')
  assert_match(true, '*b.*d', 'a-b.c-d')
  assert_match(true, 'a*.c*', 'a-b.c-d')
  assert_match(true, 'a-*.*-d', 'a-b.c-d')
  assert_match(true, '*.*', 'a.b')
  assert_match(true, '*.b', 'a.b')
  assert_match(true, 'a.*', 'a.b')
  assert_match(true, 'a.b', 'a.b')
  assert_match(true, 'a.b', 'a.b')
  assert_match(true, '*/*', '/ab')
  assert_match(true, '/*', '/ab')
  assert_match(true, '/*', '/cd')
  assert_match(true, 'a/.*', 'a/.b')
  assert_match(true, 'a/b/c/*.md', 'a/b/c/xyz.md')
  assert_match(true, 'a/b/c/*.md', 'a/b/c/xyz.md')
  assert_match(true, 'a/*/z/.a', 'a/b/z/.a')
  assert_match(true, 'a/**/c/*.md', 'a/bb.bb/aa/b.b/aa/c/xyz.md')
  assert_match(true, 'a/**/c/*.md', 'a/bb.bb/aa/bb/aa/c/xyz.md')
  assert_match(true, 'a/*/c/*.md', 'a/bb.bb/c/xyz.md')
  assert_match(true, 'a/*/c/*.md', 'a/bb/c/xyz.md')
  assert_match(true, 'a/*/c/*.md', 'a/bbbb/c/xyz.md')
  assert_match(false, '*/*/*', 'aaa')
  assert_match(false, '*/*/*', 'aaa/bb/aa/rr')
  assert_match(false, 'aaa*', 'aaa/bba/ccc')
  assert_match(false, 'aaa/*', 'aaa/bba/ccc')
  assert_match(false, 'aaa/*ccc', 'aaa/bba/ccc')
  assert_match(false, 'aaa/*z', 'aaa/bba/ccc')
  assert_match(false, '*/*/*', 'aaa/bbb')
  assert_match(false, '*/*jk*/*i', 'ab/zzz/ejkl/hi')
  assert_match(true, '*/*/*', 'aaa/bba/ccc')
  assert_match(true, 'aaa/**', 'aaa/bba/ccc')
  assert_match(true, 'aaa/*', 'aaa/bbb')
  assert_match(true, '*/*z*/*/*i', 'ab/zzz/ejkl/hi')
  assert_match(true, '*j*i', 'abzzzejklhi')
  assert_match(true, '*', 'a')
  assert_match(true, '*', 'b')
  assert_match(false, '*', 'a/a')
  assert_match(false, '*', 'a/a/a')
  assert_match(false, '*', 'a/a/b')
  assert_match(false, '*', 'a/a/a/a')
  assert_match(false, '*', 'a/a/a/a/a')
  assert_match(false, '*/*', 'a')
  assert_match(true, '*/*', 'a/a')
  assert_match(false, '*/*', 'a/a/a')
  assert_match(false, '*/*/*', 'a')
  assert_match(false, '*/*/*', 'a/a')
  assert_match(true, '*/*/*', 'a/a/a')
  assert_match(false, '*/*/*', 'a/a/a/a')
  assert_match(false, '*/*/*/*', 'a')
  assert_match(false, '*/*/*/*', 'a/a')
  assert_match(false, '*/*/*/*', 'a/a/a')
  assert_match(true, '*/*/*/*', 'a/a/a/a')
  assert_match(false, '*/*/*/*', 'a/a/a/a/a')
  assert_match(false, '*/*/*/*/*', 'a')
  assert_match(false, '*/*/*/*/*', 'a/a')
  assert_match(false, '*/*/*/*/*', 'a/a/a')
  assert_match(false, '*/*/*/*/*', 'a/a/b')
  assert_match(false, '*/*/*/*/*', 'a/a/a/a')
  assert_match(true, '*/*/*/*/*', 'a/a/a/a/a')
  assert_match(false, '*/*/*/*/*', 'a/a/a/a/a/a')
  assert_match(false, 'a/*', 'a')
  assert_match(true, 'a/*', 'a/a')
  assert_match(false, 'a/*', 'a/a/a')
  assert_match(false, 'a/*', 'a/a/a/a')
  assert_match(false, 'a/*', 'a/a/a/a/a')
  assert_match(false, 'a/*/*', 'a')
  assert_match(false, 'a/*/*', 'a/a')
  assert_match(true, 'a/*/*', 'a/a/a')
  assert_match(false, 'a/*/*', 'b/a/a')
  assert_match(false, 'a/*/*', 'a/a/a/a')
  assert_match(false, 'a/*/*', 'a/a/a/a/a')
  assert_match(false, 'a/*/*/*', 'a')
  assert_match(false, 'a/*/*/*', 'a/a')
  assert_match(false, 'a/*/*/*', 'a/a/a')
  assert_match(true, 'a/*/*/*', 'a/a/a/a')
  assert_match(false, 'a/*/*/*', 'a/a/a/a/a')
  assert_match(false, 'a/*/*/*/*', 'a')
  assert_match(false, 'a/*/*/*/*', 'a/a')
  assert_match(false, 'a/*/*/*/*', 'a/a/a')
  assert_match(false, 'a/*/*/*/*', 'a/a/b')
  assert_match(false, 'a/*/*/*/*', 'a/a/a/a')
  assert_match(true, 'a/*/*/*/*', 'a/a/a/a/a')
  assert_match(false, 'a/*/a', 'a')
  assert_match(false, 'a/*/a', 'a/a')
  assert_match(true, 'a/*/a', 'a/a/a')
  assert_match(false, 'a/*/a', 'a/a/b')
  assert_match(false, 'a/*/a', 'a/a/a/a')
  assert_match(false, 'a/*/a', 'a/a/a/a/a')
  assert_match(false, 'a/*/b', 'a')
  assert_match(false, 'a/*/b', 'a/a')
  assert_match(false, 'a/*/b', 'a/a/a')
  assert_match(true, 'a/*/b', 'a/a/b')
  assert_match(false, 'a/*/b', 'a/a/a/a')
  assert_match(false, 'a/*/b', 'a/a/a/a/a')
  assert_match(false, '*/**/a', 'a')
  assert_match(false, '*/**/a', 'a/a/b')
  assert_match(true, '*/**/a', 'a/a')
  assert_match(true, '*/**/a', 'a/a/a')
  assert_match(true, '*/**/a', 'a/a/a/a')
  assert_match(true, '*/**/a', 'a/a/a/a/a')
  assert_match(false, '*/', 'a')
  assert_match(false, '*/*', 'a')
  assert_match(false, 'a/*', 'a')
  assert_match(false, '*', 'a/a')
  assert_match(false, '*/', 'a/a')
  assert_match(false, '*/', 'a/x/y')
  assert_match(false, '*/*', 'a/x/y')
  assert_match(false, 'a/*', 'a/x/y')
  assert_match(true, '*', 'a')
  assert_match(true, '*/', 'a/')
  assert_match(true, '*{,/}', 'a/')
  assert_match(true, '*/*', 'a/a')
  assert_match(true, 'a/*', 'a/a')
  assert_match(false, 'a/**/*.txt', 'a.txt')
  assert_match(true, 'a/**/*.txt', 'a/x/y.txt')
  assert_match(false, 'a/**/*.txt', 'a/x/y/z')
  assert_match(false, 'a/*.txt', 'a.txt')
  assert_match(true, 'a/*.txt', 'a/b.txt')
  assert_match(false, 'a/*.txt', 'a/x/y.txt')
  assert_match(false, 'a/*.txt', 'a/x/y/z')
  assert_match(true, 'a*.txt', 'a.txt')
  assert_match(false, 'a*.txt', 'a/b.txt')
  assert_match(false, 'a*.txt', 'a/x/y.txt')
  assert_match(false, 'a*.txt', 'a/x/y/z')
  assert_match(true, '*.txt', 'a.txt')
  assert_match(false, '*.txt', 'a/b.txt')
  assert_match(false, '*.txt', 'a/x/y.txt')
  assert_match(false, '*.txt', 'a/x/y/z')
  assert_match(false, 'a*', 'a/b')
  assert_match(false, 'a/**/b', 'a/a/bb')
  assert_match(false, 'a/**/b', 'a/bb')
  assert_match(false, '*/**', 'foo')
  assert_match(false, '**/', 'foo/bar')
  assert_match(false, '**/*/', 'foo/bar')
  assert_match(false, '*/*/', 'foo/bar')
  assert_match(true, '**/..', '/home/foo/..')
  assert_match(true, '**/a', 'a')
  assert_match(true, '**', 'a/a')
  assert_match(true, 'a/**', 'a/a')
  assert_match(true, 'a/**', 'a/')
  assert_match(false, '**/', 'a/a')
  assert_match(false, '**/', 'a/a')
  assert_match(true, '*/**/a', 'a/a')
  assert_match(true, '*/**', 'foo/')
  assert_match(true, '**/*', 'foo/bar')
  assert_match(true, '*/*', 'foo/bar')
  assert_match(true, '*/**', 'foo/bar')
  assert_match(true, '**/', 'foo/bar/')
  assert_match(true, '**/*/', 'foo/bar/')
  assert_match(true, '*/**', 'foo/bar/')
  assert_match(true, '*/*/', 'foo/bar/')
  assert_match(false, '*/foo', 'bar/baz/foo')
  assert_match(false, '**/bar/*', 'deep/foo/bar')
  assert_match(false, '*/bar/**', 'deep/foo/bar/baz/x')
  assert_match(false, '/*', 'ef')
  assert_match(false, '**/bar*', 'foo/bar/baz')
  assert_match(false, 'foo*bar', 'foo/baz/bar')
  assert_match(true, '/*', '/ab')
  assert_match(true, '/*', '/cd')
  assert_match(true, '/*', '/ef')
  
  assert_match(true, '*/*', 'a/b')
  assert_match(true, 'a/b/c/*.md', 'a/b/c/xyz.md')
  assert_match(true, 'a/*/c/*.md', 'a/bb.bb/c/xyz.md')
  assert_match(true, 'a/*/c/*.md', 'a/bb/c/xyz.md')
  assert_match(true, 'a/*/c/*.md', 'a/bbbb/c/xyz.md')

  -- Wildcard in directory structure
  assert_match(true, 'src/*/*.ts', 'src/foo/bar.ts')
  assert_match(false, 'src/*/*.ts', 'src/bar.ts')

  print("Star tests complete")
  report_results()
end

-- Double wildcard (globstar) tests
local function test_globstars()
  -- Double wildcard
  assert_match(true, '**', '')
  assert_match(true, '**', 'nice/wow/great/foo.ts')

  -- Double wildcard with specific path
  assert_match(false, 'foo/**/bar', '')
  assert_match(true, 'foo/**/bar', 'foo/lmao/lol/bar')
  assert_match(true, 'foo/**/bar', 'foo/lmao/lol/haha/wtf/nice/bar')
  assert_match(true, 'foo/**/bar', 'foo/bar')
  assert_match(true, 'src/**/hehe.ts', 'src/foo/baz/lol/hehe.ts')

  -- Double wildcard with file extension
  assert_match(true, 'src/**/*.ts', 'src/foo/bar/baz/nice.ts')
  assert_match(true, 'src/**/*.ts', 'src/foo/bar/nice.ts')
  assert_match(true, 'src/**/*.ts', 'src/nice.ts')

  -- Complex path with double wildcard
  assert_match(true, 'src/foo/*/bar/**/*.ts', 'src/foo/nice/bar/baz/lmao.ts')
  assert_match(true, 'src/foo/*/bar/**/*.ts', 'src/foo/nice/bar/baz/lmao.ts')

  assert_match(true, 'a/**/j/**/z/*.md', 'a/b/j/c/z/x.md')
  assert_match(true, 'a/**/j/**/z/*.md', 'a/j/z/x.md')
  assert_match(true, '**/foo', 'bar/baz/foo')
  assert_match(true, '**/bar/*', 'deep/foo/bar/baz')
  assert_match(true, '**/bar/**', 'deep/foo/bar/baz/')
  assert_match(true, '**/bar/*/*', 'deep/foo/bar/baz/x')
  assert_match(true, 'foo/**/**/bar', 'foo/b/a/z/bar')
  assert_match(true, 'foo/**/bar', 'foo/b/a/z/bar')
  assert_match(true, 'foo/**/**/bar', 'foo/bar')
  assert_match(true, 'foo/**/bar', 'foo/bar')
  assert_match(true, '*/bar/**', 'foo/bar/baz/x')
  assert_match(true, 'foo/**/**/bar', 'foo/baz/bar')
  assert_match(true, 'foo/**/bar', 'foo/baz/bar')
  assert_match(true, '**/foo', 'XXX/foo')
  
  assert_match(true, '**/*.js', 'a/b/c/d.js')
  assert_match(true, '**/*.js', 'a/b/c.js')
  assert_match(true, '**/*.js', 'a/b.js')
  assert_match(true, 'a/b/**/*.js', 'a/b/c/d/e/f.js')
  assert_match(true, 'a/b/**/*.js', 'a/b/c/d/e.js')
  assert_match(true, 'a/b/c/**/*.js', 'a/b/c/d.js')
  assert_match(true, 'a/b/**/*.js', 'a/b/c/d.js')
  assert_match(true, 'a/b/**/*.js', 'a/b/d.js')
  assert_match(false, 'a/b/**/*.js', 'a/d.js')
  assert_match(false, 'a/b/**/*.js', 'd.js')
  assert_match(true, 'a/**/b/**/c', 'a/b/c/b/c')
  assert_match(false, 'a/**/*', 'a')
  assert_match(false, 'a/**/**/*', 'a')
  assert_match(false, 'a/**/**/**/*', 'a')
  assert_match(false, '**/a', 'a/')
  assert_match(false, 'a/**/*', 'a/')
  assert_match(false, 'a/**/**/*', 'a/')
  assert_match(false, 'a/**/**/**/*', 'a/')
  assert_match(false, '**/a', 'a/b')
  assert_match(false, 'a/**/j/**/z/*.md', 'a/b/c/j/e/z/c.txt')
  assert_match(false, 'a/**/b', 'a/bb')
  assert_match(false, '**/a', 'a/c')
  assert_match(false, '**/a', 'a/b')
  assert_match(false, '**/a', 'a/x/y')
  assert_match(false, '**/a', 'a/b/c/d')
  assert_match(true, '**', 'a')
  assert_match(true, '**/a', 'a')
  assert_match(true, '**', 'a/')
  assert_match(true, '**/a/**', 'a/')
  assert_match(true, 'a/**', 'a/')
  assert_match(true, 'a/**/**', 'a/')
  assert_match(true, '**/a', 'a/a')
  assert_match(true, '**', 'a/b')
  assert_match(true, '*/*', 'a/b')
  assert_match(true, 'a/**', 'a/b')
  assert_match(true, 'a/**/*', 'a/b')
  assert_match(true, 'a/**/**/*', 'a/b')
  assert_match(true, 'a/**/**/**/*', 'a/b')
  assert_match(true, 'a/**/b', 'a/b')
  assert_match(true, '**', 'a/b/c')
  assert_match(true, '**/*', 'a/b/c')
  assert_match(true, '**/**', 'a/b/c')
  assert_match(true, '*/**', 'a/b/c')
  assert_match(true, 'a/**', 'a/b/c')
  assert_match(true, 'a/**/*', 'a/b/c')
  assert_match(true, 'a/**/**/*', 'a/b/c')
  assert_match(true, 'a/**/**/**/*', 'a/b/c')
  assert_match(true, '**', 'a/b/c/d')
  assert_match(true, 'a/**', 'a/b/c/d')
  assert_match(true, 'a/**/*', 'a/b/c/d')
  assert_match(true, 'a/**/**/*', 'a/b/c/d')
  assert_match(true, 'a/**/**/**/*', 'a/b/c/d')
  assert_match(true, 'a/b/**/c/**/*.*', 'a/b/c/d.e')
  assert_match(true, 'a/**/f/*.md', 'a/b/c/d/e/f/g.md')
  assert_match(true, 'a/**/f/**/k/*.md', 'a/b/c/d/e/f/g/h/i/j/k/l.md')
  assert_match(true, 'a/b/c/*.md', 'a/b/c/def.md')
  assert_match(true, 'a/*/c/*.md', 'a/bb.bb/c/ddd.md')
  assert_match(true, 'a/**/f/*.md', 'a/bb.bb/cc/d.d/ee/f/ggg.md')
  assert_match(true, 'a/**/f/*.md', 'a/bb.bb/cc/dd/ee/f/ggg.md')
  assert_match(true, 'a/*/c/*.md', 'a/bb/c/ddd.md')
  assert_match(true, 'a/*/c/*.md', 'a/bbbb/c/ddd.md')
  assert_match(true, 'foo/bar/**/one/**/*.*', 'foo/bar/baz/one/image.png')
  assert_match(true, 'foo/bar/**/one/**/*.*', 'foo/bar/baz/one/two/image.png')
  assert_match(true, 'foo/bar/**/one/**/*.*', 'foo/bar/baz/one/two/three/image.png')
  assert_match(false, 'a/b/**/f', 'a/b/c/d/')
  assert_match(true, '**', 'a')
  assert_match(true, '**', 'a/')
  assert_match(true, 'a/**', 'a/')
  assert_match(true, '**', 'a/b/c/d')
  assert_match(true, '**', 'a/b/c/d/')
  assert_match(true, '**/**', 'a/b/c/d/')
  assert_match(true, '**/b/**', 'a/b/c/d/')
  assert_match(true, 'a/b/**', 'a/b/c/d/')
  assert_match(true, 'a/b/**/', 'a/b/c/d/')
  assert_match(true, 'a/b/**/c/**/', 'a/b/c/d/')
  assert_match(true, 'a/b/**/c/**/d/', 'a/b/c/d/')
  assert_match(true, 'a/b/**/**/*.*', 'a/b/c/d/e.f')
  assert_match(true, 'a/b/**/*.*', 'a/b/c/d/e.f')
  assert_match(true, 'a/b/**/c/**/d/*.*', 'a/b/c/d/e.f')
  assert_match(true, 'a/b/**/d/**/*.*', 'a/b/c/d/e.f')
  assert_match(true, 'a/b/**/d/**/*.*', 'a/b/c/d/g/e.f')
  assert_match(true, 'a/b/**/d/**/*.*', 'a/b/c/d/g/g/e.f')
  assert_match(true, 'a/b-*/**/z.js', 'a/b-c/z.js')
  assert_match(true, 'a/b-*/**/z.js', 'a/b-c/d/e/z.js')
  assert_match(true, '**/*', 'a/b/c')
  assert_match(true, '**/**', 'a/b/c')
  assert_match(true, '*/**', 'a/b/c')
  assert_match(true, 'a/**/j/**/z/*.md', 'a/b/c/d/e/j/n/p/o/z/c.md')
  assert_match(true, 'a/**/z/*.md', 'a/b/c/d/e/z/c.md')
  assert_match(true, 'a/**/c/*.md', 'a/bb.bb/aa/b.b/aa/c/xyz.md')
  assert_match(true, 'a/**/c/*.md', 'a/bb.bb/aa/bb/aa/c/xyz.md')
  assert_match(false, 'a/**/j/**/z/*.md', 'a/b/c/j/e/z/c.txt')
  assert_match(false, 'a/b/**/c{d,e}/**/xyz.md', 'a/b/c/xyz.md')
  assert_match(false, 'a/b/**/c{d,e}/**/xyz.md', 'a/b/d/xyz.md')
  assert_match(false, 'a/**/', 'a/b')
  assert_match(false, 'a/**/', 'a/b/c/d')
  assert_match(false, 'a/**/', 'a/bb')
  assert_match(false, 'a/**/', 'a/cb')
  assert_match(true, '/**', '/a/b')
  assert_match(true, '**/*', 'a.b')
  assert_match(true, '**/*', 'a.js')
  assert_match(true, '**/*.js', 'a.js')
  assert_match(true, '**/*.js', 'a/a.js')
  assert_match(true, '**/*.js', 'a/a/b.js')
  assert_match(true, 'a/**/b', 'a/b')
  assert_match(true, '**/*.md', 'a/b.md')
  assert_match(true, '**/*', 'a/b/c.js')
  assert_match(true, '**/*', 'a/b/c.txt')
  assert_match(true, 'a/**/', 'a/b/c/d/')
  assert_match(true, '**/*', 'a/b/c/d/a.js')
  assert_match(true, 'a/b/**/*.js', 'a/b/c/z.js')
  assert_match(true, 'a/b/**/*.js', 'a/b/z.js')
  assert_match(true, '**/*', 'ab')
  assert_match(true, '**/*', 'ab/c')
  assert_match(true, '**/*', 'ab/c/d')
  assert_match(true, '**/*', 'abc.js')
  assert_match(false, '**/', 'a')
  assert_match(false, '**/a/*', 'a')
  assert_match(false, '**/a/*/*', 'a')
  assert_match(false, '*/a/**', 'a')
  assert_match(false, 'a/**/*', 'a')
  assert_match(false, 'a/**/**/*', 'a')
  assert_match(false, '**/', 'a/b')
  assert_match(false, '**/b/*', 'a/b')
  assert_match(false, '**/b/*/*', 'a/b')
  assert_match(false, 'b/**', 'a/b')
  assert_match(false, '**/', 'a/b/c')
  assert_match(false, '**/**/b', 'a/b/c')
  assert_match(false, '**/b', 'a/b/c')
  assert_match(false, '**/b/*/*', 'a/b/c')
  assert_match(false, 'b/**', 'a/b/c')
  assert_match(false, '**/', 'a/b/c/d')
  assert_match(false, '**/d/*', 'a/b/c/d')
  assert_match(false, 'b/**', 'a/b/c/d')
  assert_match(true, '**', 'a')
  assert_match(true, '**/**', 'a')
  assert_match(true, '**/**/*', 'a')
  assert_match(true, '**/**/a', 'a')
  assert_match(true, '**/a', 'a')
  assert_match(true, '**', 'a/b')
  assert_match(true, '**/**', 'a/b')
  assert_match(true, '**/**/*', 'a/b')
  assert_match(true, '**/**/b', 'a/b')
  assert_match(true, '**/b', 'a/b')
  assert_match(true, 'a/**', 'a/b')
  assert_match(true, 'a/**/*', 'a/b')
  assert_match(true, 'a/**/**/*', 'a/b')
  assert_match(true, '**', 'a/b/c')
  assert_match(true, '**/**', 'a/b/c')
  assert_match(true, '**/**/*', 'a/b/c')
  assert_match(true, '**/b/*', 'a/b/c')
  assert_match(true, '**/b/**', 'a/b/c')
  assert_match(true, '*/b/**', 'a/b/c')
  assert_match(true, 'a/**', 'a/b/c')
  assert_match(true, 'a/**/*', 'a/b/c')
  assert_match(true, 'a/**/**/*', 'a/b/c')
  assert_match(true, '**', 'a/b/c/d')
  assert_match(true, '**/**', 'a/b/c/d')
  assert_match(true, '**/**/*', 'a/b/c/d')
  assert_match(true, '**/**/d', 'a/b/c/d')
  assert_match(true, '**/b/**', 'a/b/c/d')
  assert_match(true, '**/b/*/*', 'a/b/c/d')
  assert_match(true, '**/d', 'a/b/c/d')
  assert_match(true, '*/b/**', 'a/b/c/d')
  assert_match(true, 'a/**', 'a/b/c/d')
  assert_match(true, 'a/**/*', 'a/b/c/d')
  assert_match(true, 'a/**/**/*', 'a/b/c/d')

  assert_match(true, 'a/**/j/**/z/*.md', 'a/b/c/d/e/j/n/p/o/z/c.md')
  assert_match(true, 'a/**/z/*.md', 'a/b/c/d/e/z/c.md')

  print("Globstar tests complete")
  report_results()
end

-- Brace expansion tests
local function test_braces()
  -- Braces
  assert_match(true, 'index.{ts,tsx,js,jsx}', 'index.ts')
  assert_match(true, 'index.{ts,tsx,js,jsx}', 'index.tsx')
  assert_match(true, 'index.{ts,tsx,js,jsx}', 'index.js')
  assert_match(true, 'index.{ts,tsx,js,jsx}', 'index.jsx')
  assert_match(false, 'index.{ts,tsx,js,jsx}', 'index.jsxxxxxxxx')

  assert_match(true, '{a,b,c}', 'a')
  assert_match(true, '{a,b,c}', 'b')
  assert_match(true, '{a,b,c}', 'c')
  assert_match(false, '{a,b,c}', 'aa')
  assert_match(false, '{a,b,c}', 'bb')
  assert_match(false, '{a,b,c}', 'cc')
  assert_match(true, 'a/{a,b}', 'a/a')
  assert_match(true, 'a/{a,b}', 'a/b')
  assert_match(false, 'a/{a,b}', 'a/c')
  assert_match(false, 'a/{a,b}', 'b/b')
  assert_match(false, 'a/{a,b,c}', 'b/b')
  assert_match(true, 'a/{a,b,c}', 'a/c')
  assert_match(true, 'a{b,bc}.txt', 'abc.txt')
  assert_match(true, 'foo[{a,b}]baz', 'foo{baz')
  assert_match(false, 'a{,b}.txt', 'abc.txt')
  assert_match(false, 'a{a,b,}.txt', 'abc.txt')
  assert_match(false, 'a{b,}.txt', 'abc.txt')
  assert_match(true, 'a{,b}.txt', 'a.txt')
  assert_match(true, 'a{b,}.txt', 'a.txt')
  assert_match(true, 'a{a,b,}.txt', 'aa.txt')
  assert_match(true, 'a{a,b,}.txt', 'aa.txt')
  assert_match(true, 'a{,b}.txt', 'ab.txt')
  assert_match(true, 'a{b,}.txt', 'ab.txt')
  assert_match(true, 'a{a,b/}*.txt', 'aa.txt')
  assert_match(true, 'a{a,b/}*.txt', 'ab/.txt')
  assert_match(true, 'a{a,b/}*.txt', 'ab/a.txt')
  assert_match(true, '{a/,}a/**', 'a/a/')
  assert_match(true, '{a/,}a/**', 'a/a/a')
  assert_match(true, '{a/,}a/**', 'a/a/')
  assert_match(true, '{a/,}a/**', 'a/a/a/')
  assert_match(true, '{a/,}b/**', 'a/b/a/')
  assert_match(true, '{a/,}b/**', 'b/a/')
  assert_match(true, 'a{,/}*.txt', 'a.txt')
  assert_match(true, 'a{,/}*.txt', 'ab.txt')
  assert_match(true, 'a{,/}*.txt', 'a/b.txt')
  assert_match(true, 'a{,/}*.txt', 'a/ab.txt')
  assert_match(true, 'a{,.*{foo,db},\\(bar\\)}.txt', 'a.txt')
  assert_match(false, 'a{,.*{foo,db},\\(bar\\)}.txt', 'adb.txt')
  assert_match(true, 'a{,.*{foo,db},\\(bar\\)}.txt', 'a.db.txt')
  assert_match(true, 'a{,*.{foo,db},\\(bar\\)}.txt', 'a.txt')
  assert_match(false, 'a{,*.{foo,db},\\(bar\\)}.txt', 'adb.txt')
  assert_match(true, 'a{,*.{foo,db},\\(bar\\)}.txt', 'a.db.txt')
  assert_match(false, 'a{,.*{foo,db},\\(bar\\)}', 'adb')
  assert_match(true, 'a{,.*{foo,db},\\(bar\\)}', 'a.db')
  assert_match(false, 'a{,*.{foo,db},\\(bar\\)}', 'adb')
  assert_match(true, 'a{,*.{foo,db},\\(bar\\)}', 'a.db')
  assert_match(false, '{,.*{foo,db},\\(bar\\)}', 'a')
  assert_match(false, '{,.*{foo,db},\\(bar\\)}', 'adb')
  assert_match(false, '{,.*{foo,db},\\(bar\\)}', 'a.db')
  assert_match(true, '{,.*{foo,db},\\(bar\\)}', '.db')
  assert_match(false, '{,*.{foo,db},\\(bar\\)}', 'a')
  assert_match(true, '{*,*.{foo,db},\\(bar\\)}', 'a')
  assert_match(false, '{,*.{foo,db},\\(bar\\)}', 'adb')
  assert_match(true, '{,*.{foo,db},\\(bar\\)}', 'a.db')
  assert_match(false, 'a/b/**/c{d,e}/**/xyz.md', 'a/b/c/xyz.md')
  assert_match(false, 'a/b/**/c{d,e}/**/xyz.md', 'a/b/d/xyz.md')
  assert_match(true, 'a/b/**/c{d,e}/**/xyz.md', 'a/b/cd/xyz.md')
  assert_match(true, 'a/b/**/{c,d,e}/**/xyz.md', 'a/b/c/xyz.md')
  assert_match(true, 'a/b/**/{c,d,e}/**/xyz.md', 'a/b/d/xyz.md')
  assert_match(true, 'a/b/**/{c,d,e}/**/xyz.md', 'a/b/e/xyz.md')
  assert_match(true, '*{a,b}*', 'xax')
  assert_match(true, '*{a,b}*', 'xxax')
  assert_match(true, '*{a,b}*', 'xbx')
  assert_match(true, '*{*a,b}', 'xba')
  assert_match(true, '*{*a,b}', 'xb')

  assert_match(true, 'test.{jpg,png}', 'test.jpg')
  assert_match(true, 'test.{jpg,png}', 'test.png')
  assert_match(true, 'test.{j*g,p*g}', 'test.jpg')
  assert_match(true, 'test.{j*g,p*g}', 'test.jpxxxg')
  assert_match(true, 'test.{j*g,p*g}', 'test.jxg')
  assert_match(false, 'test.{j*g,p*g}', 'test.jnt')
  assert_match(true, 'test.{j*g,j*c}', 'test.jnc')
  assert_match(true, 'test.{jpg,p*g}', 'test.png')
  assert_match(true, 'test.{jpg,p*g}', 'test.pxg')
  assert_match(false, 'test.{jpg,p*g}', 'test.pnt')
  assert_match(true, 'test.{jpeg,png}', 'test.jpeg')
  assert_match(false, 'test.{jpeg,png}', 'test.jpg')
  assert_match(true, 'test.{jpeg,png}', 'test.png')
  assert_match(true, 'test.{jp\\,g,png}', 'test.jp,g')
  assert_match(false, 'test.{jp\\,g,png}', 'test.jxg')
  assert_match(true, 'test/{foo,bar}/baz', 'test/foo/baz')
  assert_match(true, 'test/{foo,bar}/baz', 'test/bar/baz')
  assert_match(false, 'test/{foo,bar}/baz', 'test/baz/baz')
  assert_match(true, 'test/{foo*,bar*}/baz', 'test/foooooo/baz')
  assert_match(true, 'test/{foo*,bar*}/baz', 'test/barrrrr/baz')
  assert_match(true, 'test/{*foo,*bar}/baz', 'test/xxxxfoo/baz')
  assert_match(true, 'test/{*foo,*bar}/baz', 'test/xxxxbar/baz')
  assert_match(true, 'test/{foo/**,bar}/baz', 'test/bar/baz')
  assert_match(false, 'test/{foo/**,bar}/baz', 'test/bar/test/baz')

  assert_match(true, 'a/{a{a,b},b}', 'a/aa')
  assert_match(true, 'a/{a{a,b},b}', 'a/ab')
  assert_match(false, 'a/{a{a,b},b}', 'a/ac')
  assert_match(true, 'a/{a{a,b},b}', 'a/b')
  assert_match(false, 'a/{a{a,b},b}', 'a/c')
  assert_match(true, 'a/{b,c[}]*}', 'a/b')
  assert_match(true, 'a/{b,c[}]*}', 'a/c}xx')

  print("Brace expansion tests complete")
  report_results()
end

-- Unicode/non-ASCII pattern tests
local function test_unicode()
  -- Non-ASCII patterns
  assert_match(true, '😎/¢£.{ts,tsx,js,jsx}', '😎/¢£.ts')
  assert_match(true, '😎/¢£.{ts,tsx,js,jsx}', '😎/¢£.tsx')
  assert_match(true, '😎/¢£.{ts,tsx,js,jsx}', '😎/¢£.js')
  assert_match(true, '😎/¢£.{ts,tsx,js,jsx}', '😎/¢£.jsx')
  assert_match(false, '😎/¢£.{ts,tsx,js,jsx}', '😎/¢£.jsxxxxxxxx')

  assert_match(true, '*é*', 'café noir')
  assert_match(true, 'caf*noir', 'café noir')
  assert_match(true, 'caf*noir', 'cafeenoir')

  assert_match(true, 'F[ë£a]', 'Fë')
  assert_match(true, 'F[ë£a]', 'F£')
  assert_match(true, 'F[ë£a]', 'Fa')

  print("Unicode pattern tests complete")
  report_results()
end

local function test_ext()
  assert_match(false, '**-bc-**', 'a-b.c-d')
  assert_match(true, '**-**.**-**', 'a-b.c-d')
  assert_match(true, '**-b**c-**', 'a-b.c-d')
  assert_match(true, '**-b.c-**', 'a-b.c-d')
  assert_match(true, '**.**', 'a-b.c-d')
  assert_match(true, '**.**-**', 'a-b.c-d')
  assert_match(true, '**.**-d', 'a-b.c-d')
  assert_match(true, '**.c-**', 'a-b.c-d')
  assert_match(true, '**b.**d', 'a-b.c-d')
  assert_match(true, 'a**.c**', 'a-b.c-d')
  assert_match(true, 'a-**.**-d', 'a-b.c-d')
  assert_match(true, '**.**', 'a.b')
  assert_match(true, '**.b', 'a.b')
  assert_match(true, 'a.**', 'a.b')
  assert_match(false, '**c', 'a/b/c')
  assert_match(true, 'a/**b', 'a/b')
  assert_match(false, 'a/**c', 'a/b/c')
  assert_match(false, 'a/**z', 'a/b/c')
  assert_match(false, 'a/**b**/c', 'a/b/c/b/c')
  assert_match(true, 'a/**b**/c', 'a/aba/c')
  assert_match(true, 'a/**b**/c', 'a/b/c')
  assert_match(true, 'a/b/c**/*.js', 'a/b/c/d.js')
  assert_match(false, 'a/b/c**/*.js', 'a/b/c/d/e.js')
  assert_match(false, 'foo**bar', 'foo/baz/bar')

  print("Extension tests complete")
  report_results()
end

test_basic_patterns()
test_stars()
test_globstars()
test_braces()
test_unicode()
test_ext()
